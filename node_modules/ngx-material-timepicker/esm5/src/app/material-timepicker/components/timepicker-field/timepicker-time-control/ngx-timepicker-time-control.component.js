import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { TimeParserPipe } from '../../../pipes/time-parser.pipe';
import { isDigit } from '../../../utils/timepicker.utils';
var NgxTimepickerTimeControlComponent = /** @class */ (function () {
    function NgxTimepickerTimeControlComponent(timeParser) {
        this.timeParser = timeParser;
        this.timeChanged = new EventEmitter();
    }
    NgxTimepickerTimeControlComponent.prototype.ngOnChanges = function (changes) {
        if (changes.timeList && this.time != null) {
            if (this.isSelectedTimeDisabled(this.time)) {
                this.setAvailableTime();
            }
        }
    };
    NgxTimepickerTimeControlComponent.prototype.changeTime = function (event) {
        event.stopPropagation();
        var char = String.fromCharCode(event.keyCode);
        var time = concatTime(String(this.time), char);
        this.changeTimeIfValid(time);
    };
    NgxTimepickerTimeControlComponent.prototype.onKeydown = function (event) {
        event.stopPropagation();
        if (!isDigit(event)) {
            event.preventDefault();
        }
        switch (event.key) {
            case 'ArrowUp':
                this.increase();
                break;
            case 'ArrowDown':
                this.decrease();
                break;
        }
        if (this.preventTyping && event.key !== 'Tab') {
            event.preventDefault();
        }
    };
    NgxTimepickerTimeControlComponent.prototype.increase = function () {
        if (!this.disabled) {
            var nextTime = +this.time + (this.minutesGap || 1);
            if (nextTime > this.max) {
                nextTime = this.min;
            }
            if (this.isSelectedTimeDisabled(nextTime)) {
                nextTime = this.getAvailableTime(nextTime, this.getNextAvailableTime.bind(this));
            }
            if (nextTime !== this.time) {
                this.timeChanged.emit(nextTime);
            }
        }
    };
    NgxTimepickerTimeControlComponent.prototype.decrease = function () {
        if (!this.disabled) {
            var previousTime = +this.time - (this.minutesGap || 1);
            if (previousTime < this.min) {
                previousTime = this.minutesGap ? this.max - (this.minutesGap - 1) : this.max;
            }
            if (this.isSelectedTimeDisabled(previousTime)) {
                previousTime = this.getAvailableTime(previousTime, this.getPrevAvailableTime.bind(this));
            }
            if (previousTime !== this.time) {
                this.timeChanged.emit(previousTime);
            }
        }
    };
    NgxTimepickerTimeControlComponent.prototype.onFocus = function () {
        this.isFocused = true;
        this.previousTime = this.time;
    };
    NgxTimepickerTimeControlComponent.prototype.onBlur = function () {
        this.isFocused = false;
        if (this.previousTime !== this.time) {
            this.changeTimeIfValid(+this.time);
        }
    };
    NgxTimepickerTimeControlComponent.prototype.onModelChange = function (value) {
        this.time = +this.timeParser.transform(value, this.timeUnit);
    };
    NgxTimepickerTimeControlComponent.prototype.changeTimeIfValid = function (value) {
        if (!isNaN(value)) {
            this.time = value;
            if (this.time > this.max) {
                var timeString = String(value);
                this.time = +timeString[timeString.length - 1];
            }
            if (this.time < this.min) {
                this.time = this.min;
            }
            this.timeChanged.emit(this.time);
        }
    };
    NgxTimepickerTimeControlComponent.prototype.isSelectedTimeDisabled = function (time) {
        return this.timeList.find(function (faceTime) { return faceTime.time === time; }).disabled;
    };
    NgxTimepickerTimeControlComponent.prototype.getNextAvailableTime = function (index) {
        var timeCollection = this.timeList;
        var maxValue = timeCollection.length;
        for (var i = index + 1; i < maxValue; i++) {
            var time = timeCollection[i];
            if (!time.disabled) {
                return time.time;
            }
        }
    };
    NgxTimepickerTimeControlComponent.prototype.getPrevAvailableTime = function (index) {
        for (var i = index; i >= 0; i--) {
            var time = this.timeList[i];
            if (!time.disabled) {
                return time.time;
            }
        }
    };
    NgxTimepickerTimeControlComponent.prototype.getAvailableTime = function (currentTime, fn) {
        var currentTimeIndex = this.timeList.findIndex(function (time) { return time.time === currentTime; });
        var availableTime = fn(currentTimeIndex);
        return availableTime != null ? availableTime : this.time;
    };
    NgxTimepickerTimeControlComponent.prototype.setAvailableTime = function () {
        var availableTime = this.timeList.find(function (t) { return !t.disabled; });
        if (availableTime != null) {
            this.time = availableTime.time;
            this.timeChanged.emit(this.time);
        }
    };
    NgxTimepickerTimeControlComponent.ctorParameters = function () { return [
        { type: TimeParserPipe }
    ]; };
    tslib_1.__decorate([
        Input()
    ], NgxTimepickerTimeControlComponent.prototype, "time", void 0);
    tslib_1.__decorate([
        Input()
    ], NgxTimepickerTimeControlComponent.prototype, "min", void 0);
    tslib_1.__decorate([
        Input()
    ], NgxTimepickerTimeControlComponent.prototype, "max", void 0);
    tslib_1.__decorate([
        Input()
    ], NgxTimepickerTimeControlComponent.prototype, "placeholder", void 0);
    tslib_1.__decorate([
        Input()
    ], NgxTimepickerTimeControlComponent.prototype, "timeUnit", void 0);
    tslib_1.__decorate([
        Input()
    ], NgxTimepickerTimeControlComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Input()
    ], NgxTimepickerTimeControlComponent.prototype, "timeList", void 0);
    tslib_1.__decorate([
        Input()
    ], NgxTimepickerTimeControlComponent.prototype, "preventTyping", void 0);
    tslib_1.__decorate([
        Input()
    ], NgxTimepickerTimeControlComponent.prototype, "minutesGap", void 0);
    tslib_1.__decorate([
        Output()
    ], NgxTimepickerTimeControlComponent.prototype, "timeChanged", void 0);
    NgxTimepickerTimeControlComponent = tslib_1.__decorate([
        Component({
            selector: 'ngx-timepicker-time-control',
            template: "<div class=\"ngx-timepicker-control\" [ngClass]=\"{'ngx-timepicker-control--active': isFocused}\">\n    <!--suppress HtmlFormInputWithoutLabel -->\n    <input class=\"ngx-timepicker-control__input\"\n           maxlength=\"2\"\n           [ngModel]=\"time | timeParser: timeUnit | timeLocalizer: timeUnit : true\"\n           (ngModelChange)=\"onModelChange($event)\"\n           [placeholder]=\"placeholder\"\n           [disabled]=\"disabled\"\n           (keydown)=\"onKeydown($event)\"\n           (keypress)=\"changeTime($event)\"\n           (focus)=\"onFocus()\"\n           (blur)=\"onBlur()\">\n    <div class=\"ngx-timepicker-control__arrows\">\n            <span class=\"ngx-timepicker-control__arrow\" role=\"button\" (click)=\"increase()\">\n                &#9650;\n            </span>\n        <span class=\"ngx-timepicker-control__arrow\" role=\"button\" (click)=\"decrease()\">\n                &#9660;\n            </span>\n    </div>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [TimeParserPipe],
            styles: [".ngx-timepicker-control{position:relative;display:flex;width:60px;height:30px;padding:0 5px;box-sizing:border-box}.ngx-timepicker-control--active:after{content:\"\";position:absolute;bottom:-2px;left:0;width:100%;height:1px;background-color:#00bfff}.ngx-timepicker-control__input{width:100%;height:100%;padding:0 5px 0 0;border:0;font-size:1rem;color:inherit;outline:0;text-align:center}.ngx-timepicker-control__input:disabled{background-color:transparent}.ngx-timepicker-control__arrows{position:absolute;right:2px;top:0;display:flex;flex-direction:column}.ngx-timepicker-control__arrow{font-size:11px;color:rgba(0,0,0,.4);cursor:pointer;transition:color .2s;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-timepicker-control__arrow:hover{color:rgba(0,0,0,.9)}"]
        })
    ], NgxTimepickerTimeControlComponent);
    return NgxTimepickerTimeControlComponent;
}());
export { NgxTimepickerTimeControlComponent };
function concatTime(currentTime, nextTime) {
    var isNumber = /\d/.test(nextTime);
    if (isNumber) {
        var time = currentTime + nextTime;
        return +time;
    }
}
//# sourceMappingURL=data:application/json;base64,